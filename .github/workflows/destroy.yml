name: Destroy Infrastructure

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        default: ''
      target_resources:
        description: 'Specific resources to destroy (optional - leave empty for all)'
        required: false
        default: ''

jobs:
  pre-destroy-check:
    name: Pre-Destroy Checks
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'DESTROY'
    
    outputs:
      has_state: ${{ steps.check-state.outputs.has_state }}
      resources_count: ${{ steps.check-state.outputs.resources_count }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Check Remote State
      id: check-state
      run: |
        echo "üîç Checking remote state in S3..."
        
        # Check if state file exists in S3
        if aws s3 ls s3://terraform-state-asterra-project/geojson-processor/terraform.tfstate > /dev/null 2>&1; then
          echo "üìÅ State file found in S3"
          
          # Try to list resources
          if terraform state list > /dev/null 2>&1; then
            RESOURCES=$(terraform state list | wc -l)
            echo "has_state=true" >> $GITHUB_OUTPUT
            echo "resources_count=$RESOURCES" >> $GITHUB_OUTPUT
            echo "üìä Found $RESOURCES resources in state"
            echo "üìã Resources to be destroyed:"
            terraform state list
          else
            echo "‚ö†Ô∏è State file exists but no resources found"
            echo "has_state=false" >> $GITHUB_OUTPUT
            echo "resources_count=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå No state file found in S3"
          echo "has_state=false" >> $GITHUB_OUTPUT
          echo "resources_count=0" >> $GITHUB_OUTPUT
        fi

  destroy:
    name: Destroy Infrastructure
    needs: pre-destroy-check
    runs-on: ubuntu-latest
    if: needs.pre-destroy-check.outputs.has_state == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Show Destroy Plan
      run: |
        echo "üîç Showing what will be destroyed..."
        if [ -n "${{ github.event.inputs.target_resources }}" ]; then
          terraform plan -destroy -target="${{ github.event.inputs.target_resources }}"
        else
          terraform plan -destroy
        fi
        
    - name: Destroy Infrastructure
      run: |
        echo "üö® Starting infrastructure destruction..."
        if [ -n "${{ github.event.inputs.target_resources }}" ]; then
          echo "üéØ Targeting specific resources: ${{ github.event.inputs.target_resources }}"
          terraform destroy -auto-approve -target="${{ github.event.inputs.target_resources }}"
        else
          echo "üí• Destroying ALL infrastructure"
          terraform destroy -auto-approve
        fi
        
    - name: Verify Destruction
      run: |
        echo "‚úÖ Checking if resources were destroyed..."
        REMAINING=$(terraform state list | wc -l || echo "0")
        if [ "$REMAINING" -eq 0 ]; then
          echo "üéâ All resources successfully destroyed!"
          echo "üßπ Cleaning up remote state file..."
          aws s3 rm s3://terraform-state-asterra-project/geojson-processor/terraform.tfstate || echo "State file already removed"
        else
          echo "‚ö†Ô∏è $REMAINING resources still remain:"
          terraform state list || echo "Could not list remaining resources"
        fi

  manual-cleanup:
    name: Manual AWS Cleanup
    needs: [pre-destroy-check, destroy]
    runs-on: ubuntu-latest
    if: always() && github.event.inputs.confirm_destroy == 'DESTROY'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Force cleanup ECR repositories
      run: |
        echo "üßπ Cleaning up ECR repositories..."
        aws ecr describe-repositories --query 'repositories[?repositoryName==`geojson-processor`].repositoryName' --output text | \
        xargs -r -I {} aws ecr delete-repository --repository-name {} --force || echo "ECR cleanup completed"
        
    - name: Force cleanup ECS services
      run: |
        echo "üßπ Cleaning up ECS services..."
        CLUSTER="geojson-processor-cluster"
        
        # Stop services
        for SERVICE in geojson-processor-service wordpress-service; do
          aws ecs update-service --cluster $CLUSTER --service $SERVICE --desired-count 0 || echo "Service $SERVICE not found"
          aws ecs delete-service --cluster $CLUSTER --service $SERVICE || echo "Service $SERVICE not found"
        done
        
        # Delete cluster
        aws ecs delete-cluster --cluster $CLUSTER || echo "Cluster not found"
        
    - name: Force cleanup Load Balancers
      run: |
        echo "üßπ Cleaning up Load Balancers..."
        aws elbv2 describe-load-balancers --query 'LoadBalancers[?LoadBalancerName==`wordpress-alb`].LoadBalancerArn' --output text | \
        xargs -r -I {} aws elbv2 delete-load-balancer --load-balancer-arn {} || echo "ALB cleanup completed"
        
    - name: Force cleanup RDS instances
      run: |
        echo "üßπ Cleaning up RDS instances..."
        for DB in my-postgres-db wordpress-db; do
          aws rds delete-db-instance --db-instance-identifier $DB --skip-final-snapshot || echo "DB $DB not found"
        done
        
    - name: Summary
      run: |
        echo "üèÅ Cleanup Summary:"
        echo "‚úÖ Terraform destroy completed"
        echo "‚úÖ ECR repositories cleaned"
        echo "‚úÖ ECS services and cluster cleaned"
        echo "‚úÖ Load balancers cleaned"
        echo "‚úÖ RDS instances cleaned"
        echo ""
        echo "üí° Note: Some resources may take a few minutes to fully terminate"
        echo "üí° Check AWS Console to verify all resources are gone"

  no-state-found:
    name: No State Found
    needs: pre-destroy-check
    runs-on: ubuntu-latest
    if: needs.pre-destroy-check.outputs.has_state == 'false'
    
    steps:
    - name: No resources to destroy
      run: |
        echo "‚ÑπÔ∏è No Terraform state found - nothing to destroy"
        echo "üí° If you have resources in AWS, they may have been created outside of Terraform"
        echo "üí° Check the manual-cleanup job for AWS resource cleanup"

  emergency-cleanup:
    name: Emergency AWS Cleanup (No State)
    needs: pre-destroy-check
    runs-on: ubuntu-latest
    if: needs.pre-destroy-check.outputs.has_state == 'false' && github.event.inputs.confirm_destroy == 'DESTROY'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Emergency cleanup all resources
      run: |
        echo "üö® Emergency cleanup - destroying resources without state"
        echo "üßπ This will attempt to find and destroy known resources"
        
        # Cleanup ECR
        aws ecr describe-repositories --query 'repositories[?repositoryName==`geojson-processor`].repositoryName' --output text | \
        xargs -r -I {} aws ecr delete-repository --repository-name {} --force || echo "ECR cleanup completed"
        
        # Cleanup ECS
        CLUSTER="geojson-processor-cluster"
        for SERVICE in geojson-processor-service wordpress-service; do
          aws ecs update-service --cluster $CLUSTER --service $SERVICE --desired-count 0 || echo "Service $SERVICE not found"
          aws ecs delete-service --cluster $CLUSTER --service $SERVICE || echo "Service $SERVICE not found"
        done
        aws ecs delete-cluster --cluster $CLUSTER || echo "Cluster not found"
        
        # Cleanup RDS
        for DB in my-postgres-db wordpress-db; do
          aws rds delete-db-instance --db-instance-identifier $DB --skip-final-snapshot || echo "DB $DB not found"
        done
        
        echo "üèÅ Emergency cleanup completed"
