        aws rds describe-db-parameter-groups --query 'DBParameterGroups[?!starts_with(DBParameterGroupName, `default.`)].DBParameterGroupName' --output text | tr '\t' '\n' | while read PG; do
          if [ ! -z "$PG" ]; then
            echo "Deleting parameter group: $PG"
            aws rds delete-db-parameter-group --db-parameter-group-name "$PG" || echo "Failed to delete $PG"
          fi
        done
        
        # Delete subnet groups
        aws rds describe-db-subnet-groups --query 'DBSubnetGroups[?!starts_with(DBSubnetGroupName, `default`)].DBSubnetGroupName' --output text | tr '\t' '\n' | while read SG; do
          if [ ! -z "$SG" ]; then
            echo "Deleting subnet group: $SG"
            aws rds delete-db-subnet-group --db-subnet-group-name "$SG" || echo "Failed to delete $SG"
          fi
        done

    - name: 9. Cleanup Load Balancers and Target Groups
      run: |
        echo "🧹 STEP 9: DESTROYING ALL LOAD BALANCERS AND TARGET GROUPS..."
        
        # Delete Application Load Balancers (ALBs) and Network Load Balancers (NLBs)
        echo "--- Deleting Application/Network Load Balancers ---"
        aws elbv2 describe-load-balancers --query 'LoadBalancers[*].[LoadBalancerArn,LoadBalancerName,Type]' --output text | while read ALB_ARN ALB_NAME ALB_TYPE; do
          if [ ! -z "$ALB_ARN" ]; then
            echo "Deleting $ALB_TYPE Load Balancer: $ALB_NAME ($ALB_ARN)"
            
            # First, delete all listeners
            aws elbv2 describe-listeners --load-balancer-arn "$ALB_ARN" --query 'Listeners[*].ListenerArn' --output text | tr '\t' '\n' | while read LISTENER_ARN; do
              if [ ! -z "$LISTENER_ARN" ]; then
                echo "  Deleting listener: $LISTENER_ARN"
                aws elbv2 delete-listener --listener-arn "$LISTENER_ARN" || echo "  Failed to delete listener"
              fi
            done
            
            # Delete the load balancer
            aws elbv2 delete-load-balancer --load-balancer-arn "$ALB_ARN" || echo "Failed to delete ALB: $ALB_NAME"
            sleep 5
          fi
        done
        
        # Delete Classic Load Balancers (ELBs)
        echo "--- Deleting Classic Load Balancers ---"
        aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text | tr '\t' '\n' | while read ELB_NAME; do
          if [ ! -z "$ELB_NAME" ]; then
            echo "Deleting Classic ELB: $ELB_NAME"
            aws elb delete-load-balancer --load-balancer-name "$ELB_NAME" || echo "Failed to delete ELB: $ELB_NAME"
            sleep 5
          fi
        done
        
        # Wait for load balancers to be deleted before proceeding with target groups
        echo "--- Waiting for load balancers to be deleted ---"
        sleep 30
        
        # Delete Target Groups (after load balancers are deleted)
        echo "--- Deleting Target Groups ---"
        aws elbv2 describe-target-groups --query 'TargetGroups[*].[TargetGroupArn,TargetGroupName]' --output text | while read TG_ARN TG_NAME; do
          if [ ! -z "$TG_ARN" ]; then
            echo "Deleting Target Group: $TG_NAME ($TG_ARN)"
            aws elbv2 delete-target-group --target-group-arn "$TG_ARN" || echo "Failed to delete Target Group: $TG_NAME"
            sleep 2
          fi
        done

    - name: 10. Cleanup S3 Buckets
      run: |
        echo "🧹 STEP 10: DESTROYING ALL S3 BUCKETS..."
        
        aws s3 ls | awk '{print $3}' | while read BUCKET; do
          if [ ! -z "$BUCKET" ]; then
            echo "Emptying and deleting bucket: $BUCKET"
            
            # Remove all versions and delete markers
            aws s3api list-object-versions --bucket "$BUCKET" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text | while read KEY VERSION; do
              if [ ! -z "$KEY" ] && [ ! -z "$VERSION" ]; then
                aws s3api delete-object --bucket "$BUCKET" --key "$KEY" --version-id "$VERSION" || echo "Failed to delete version"
              fi
            done
            
            aws s3api list-object-versions --bucket "$BUCKET" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text | while read KEY VERSION; do
              if [ ! -z "$KEY" ] && [ ! -z "$VERSION" ]; then
                aws s3api delete-object --bucket "$BUCKET" --key "$KEY" --version-id "$VERSION" || echo "Failed to delete marker"
              fi
            done
            
            # Empty bucket and delete
            aws s3 rm "s3://$BUCKET" --recursive || echo "Failed to empty $BUCKET"
            aws s3 rb "s3://$BUCKET" || echo "Failed to delete $BUCKET"
          fi
        done

    - name: 11. Delete Security Groups
      run: |
        echo "🧹 STEP 11: DESTROYING ALL CUSTOM SECURITY GROUPS..."
        
        # Get all non-default security groups
        aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | tr '\t' '\n' | while read SG_ID; do
          if [ ! -z "$SG_ID" ]; then
            echo "Attempting to delete security group: $SG_ID"
            
            # Try multiple times as dependencies may need to clear
            for i in {1..5}; do
              if aws ec2 delete-security-group --group-id "$SG_ID" 2>/dev/null; then
                echo "  Successfully deleted: $SG_ID"
                break
              else
                echo "  Attempt $i failed for $SG_ID, retrying in 30 seconds..."
                sleep 30
              fi
            done
          fi
        done

    - name: 12. Detach and Delete Internet Gateways
      run: |
        echo "🧹 STEP 12: DESTROYING ALL INTERNET GATEWAYS..."
        
        aws ec2 describe-internet-gateways --query 'InternetGateways[*].[InternetGatewayId,Attachments[0].VpcId]' --output text | while read IGW_ID VPC_ID; do
          if [ ! -z "$IGW_ID" ] && [ "$VPC_ID" != "None" ] && [ ! -z "$VPC_ID" ]; then
            echo "Detaching IGW $IGW_ID from VPC $VPC_ID"
            aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" || echo "Failed to detach $IGW_ID"
            sleep 10
            
            echo "Deleting IGW: $IGW_ID"
            aws ec2 delete-internet-gateway --internet-gateway-id "$IGW_ID" || echo "Failed to delete $IGW_ID"
          fi
        done

    - name: 13. Delete Subnets
      run: |
        echo "🧹 STEP 13: DESTROYING ALL SUBNETS..."
        
        aws ec2 describe-subnets --query 'Subnets[*].SubnetId' --output text | tr '\t' '\n' | while read SUBNET_ID; do
          if [ ! -z "$SUBNET_ID" ]; then
            echo "Deleting subnet: $SUBNET_ID"
            aws ec2 delete-subnet --subnet-id "$SUBNET_ID" || echo "Failed to delete $SUBNET_ID"
          fi
        done

    - name: 14. Delete Route Tables
      run: |
        echo "🧹 STEP 14: DESTROYING ALL CUSTOM ROUTE TABLES..."
        
        # Get all route tables that are not main route tables
        aws ec2 describe-route-tables --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text | tr '\t' '\n' | while read RT_ID; do
          if [ ! -z "$RT_ID" ]; then
            echo "Deleting route table: $RT_ID"
            aws ec2 delete-route-table --route-table-id "$RT_ID" || echo "Failed to delete $RT_ID"
          fi
        done

    - name: 15. Delete VPCs
      run: |
        echo "🧹 STEP 15: DESTROYING ALL NON-DEFAULT VPCs..."
        
        aws ec2 describe-vpcs --query 'Vpcs[?IsDefault!=`true`].VpcId' --output text | tr '\t' '\n' | while read VPC_ID; do
          if [ ! -z "$VPC_ID" ]; then
            echo "Deleting VPC: $VPC_ID"
            aws ec2 delete-vpc --vpc-id "$VPC_ID" || echo "Failed to delete $VPC_ID"
          fi
        done

    - name: 16. Cleanup CloudWatch Log Groups
      run: |
        echo "🧹 STEP 16: DESTROYING ALL CLOUDWATCH LOG GROUPS..."
        
        aws logs describe-log-groups --query 'logGroups[*].logGroupName' --output text | tr '\t' '\n' | while read LOG_GROUP; do
          if [ ! -z "$LOG_GROUP" ]; then
            echo "Deleting log group: $LOG_GROUP"
            aws logs delete-log-group --log-group-name "$LOG_GROUP" || echo "Failed to delete $LOG_GROUP"
          fi
        done

    - name: 17. Cleanup IAM User Groups
      run: |
        echo "🧹 STEP 17: DESTROYING ALL IAM USER GROUPS..."
        
        # Get all IAM groups
        aws iam list-groups --query 'Groups[*].GroupName' --output text | tr '\t' '\n' | while read GROUP_NAME; do
          if [ ! -z "$GROUP_NAME" ]; then
            echo "Processing IAM group: $GROUP_NAME"
            
            # Remove all users from the group
            aws iam get-group --group-name "$GROUP_NAME" --query 'Users[*].UserName' --output text | tr '\t' '\n' | while read USER_NAME; do
              if [ ! -z "$USER_NAME" ]; then
                echo "  Removing user $USER_NAME from group $GROUP_NAME"
                aws iam remove-user-from-group --group-name "$GROUP_NAME" --user-name "$USER_NAME" || echo "  Failed to remove user $USER_NAME"
              fi
            done
            
            # Detach all managed policies from the group
            aws iam list-attached-group-policies --group-name "$GROUP_NAME" --query 'AttachedPolicies[*].PolicyArn' --output text | tr '\t' '\n' | while read
