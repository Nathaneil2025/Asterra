name: Nuclear Cleanup - Destroy ALL AWS Resources

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm_destroy:
        description: 'Type "NUCLEAR" to confirm complete destruction'
        required: true
        default: ''

jobs:
  nuclear-cleanup:
    name: Complete AWS Resource Destruction
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'NUCLEAR'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: List all resources before destruction
      run: |
        echo "üîç SCANNING ALL AWS RESOURCES BEFORE DESTRUCTION..."
        echo "=================================================="
        
        echo "=== EC2 INSTANCES ==="
        aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,Tags[?Key==`Name`].Value|[0],InstanceType]' --output table || echo "No instances"
        
        echo "=== RDS INSTANCES ==="
        aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus,Engine]' --output table || echo "No RDS instances"
        
        echo "=== S3 BUCKETS ==="
        aws s3 ls || echo "No buckets"
        
        echo "=== ECR REPOSITORIES ==="
        aws ecr describe-repositories --query 'repositories[*].[repositoryName,repositoryUri]' --output table || echo "No ECR repos"
        
        echo "=== ECS CLUSTERS ==="
        aws ecs list-clusters --query 'clusterArns' --output table || echo "No ECS clusters"
        
        echo "=== LAMBDA FUNCTIONS ==="
        aws lambda list-functions --query 'Functions[*].[FunctionName,Runtime]' --output table || echo "No Lambda functions"
        
        echo "=== LOAD BALANCERS ==="
        aws elbv2 describe-load-balancers --query 'LoadBalancers[*].[LoadBalancerName,Type,State.Code]' --output table || echo "No ALBs"
        aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].[LoadBalancerName,Scheme]' --output table || echo "No Classic ELBs"
        
        echo "=== VPCs ==="
        aws ec2 describe-vpcs --query 'Vpcs[*].[VpcId,IsDefault,State,Tags[?Key==`Name`].Value|[0]]' --output table || echo "No VPCs"
        
        echo "=== NAT GATEWAYS ==="
        aws ec2 describe-nat-gateways --query 'NatGateways[*].[NatGatewayId,State,VpcId]' --output table || echo "No NAT Gateways"
        
        echo "=== INTERNET GATEWAYS ==="
        aws ec2 describe-internet-gateways --query 'InternetGateways[*].[InternetGatewayId,Attachments[0].VpcId,Attachments[0].State]' --output table || echo "No IGWs"
        
        echo "=== ELASTIC IPs ==="
        aws ec2 describe-addresses --query 'Addresses[*].[PublicIp,AllocationId,AssociationId,InstanceId]' --output table || echo "No Elastic IPs"
        
        echo "=== SECURITY GROUPS ==="
        aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].[GroupId,GroupName,VpcId]' --output table || echo "No custom security groups"

    - name: 1. Cleanup Lambda Functions
      run: |
        echo "üßπ STEP 1: DESTROYING ALL LAMBDA FUNCTIONS..."
        aws lambda list-functions --query 'Functions[*].FunctionName' --output text | tr '\t' '\n' | while read FUNC; do
          if [ ! -z "$FUNC" ]; then
            echo "Deleting Lambda function: $FUNC"
            aws lambda delete-function --function-name "$FUNC" || echo "Failed to delete $FUNC"
          fi
        done

    - name: 2. Cleanup ECR Repositories
      run: |
        echo "üßπ STEP 2: DESTROYING ALL ECR REPOSITORIES..."
        aws ecr describe-repositories --query 'repositories[*].repositoryName' --output text | tr '\t' '\n' | while read REPO; do
          if [ ! -z "$REPO" ]; then
            echo "Deleting ECR repository: $REPO"
            aws ecr delete-repository --repository-name "$REPO" --force || echo "Failed to delete $REPO"
          fi
        done

    - name: 3. Cleanup ECS Resources
      run: |
        echo "üßπ STEP 3: DESTROYING ALL ECS RESOURCES..."
        
        # Get all clusters
        aws ecs list-clusters --query 'clusterArns' --output text | tr '\t' '\n' | while read CLUSTER_ARN; do
          if [ ! -z "$CLUSTER_ARN" ]; then
            CLUSTER_NAME=$(basename "$CLUSTER_ARN")
            echo "Processing ECS cluster: $CLUSTER_NAME"
            
            # Stop all services in cluster
            aws ecs list-services --cluster "$CLUSTER_NAME" --query 'serviceArns' --output text | tr '\t' '\n' | while read SERVICE_ARN; do
              if [ ! -z "$SERVICE_ARN" ]; then
                SERVICE_NAME=$(basename "$SERVICE_ARN")
                echo "Stopping service: $SERVICE_NAME"
                aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --desired-count 0 || echo "Failed to stop $SERVICE_NAME"
                sleep 10
                aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" || echo "Failed to delete $SERVICE_NAME"
              fi
            done
            
            # Delete cluster
            echo "Deleting cluster: $CLUSTER_NAME"
            aws ecs delete-cluster --cluster "$CLUSTER_NAME" || echo "Failed to delete cluster"
          fi
        done

    - name: 4. Cleanup RDS Resources
      run: |
        echo "üßπ STEP 4: DESTROYING ALL RDS RESOURCES..."
        
        # Delete all DB instances
        aws rds describe-db-instances --query 'DBInstances[*].DBInstanceIdentifier' --output text | tr '\t' '\n' | while read DB; do
          if [ ! -z "$DB" ]; then
            echo "Deleting RDS instance: $DB"
            aws rds delete-db-instance --db-instance-identifier "$DB" --skip-final-snapshot || echo "Failed to delete $DB"
          fi
        done
        
        # Wait for DB instances to start deleting
        sleep 30
        
        # Delete parameter groups
        aws rds describe-db-parameter-groups --query 'DBParameterGroups[?!starts_with(DBParameterGroupName, `default.`)].DBParameterGroupName' --output text | tr '\t' '\n' | while read PG; do
          if [ ! -z "$PG" ]; then
            echo "Deleting parameter group: $PG"
            aws rds delete-db-parameter-group --db-parameter-group-name "$PG" || echo "Failed to delete $PG"
          fi
        done
        
        # Delete subnet groups
        aws rds describe-db-subnet-groups --query 'DBSubnetGroups[?!starts_with(DBSubnetGroupName, `default`)].DBSubnetGroupName' --output text | tr '\t' '\n' | while read SG; do
          if [ ! -z "$SG" ]; then
            echo "Deleting subnet group: $SG"
            aws rds delete-db-subnet-group --db-subnet-group-name "$SG" || echo "Failed to delete $SG"
          fi
        done

    - name: 5. Cleanup Load Balancers
      run: |
        echo "üßπ STEP 5: DESTROYING ALL LOAD BALANCERS..."
        
        # Application Load Balancers
        aws elbv2 describe-load-balancers --query 'LoadBalancers[*].LoadBalancerArn' --output text | tr '\t' '\n' | while read ALB_ARN; do
          if [ ! -z "$ALB_ARN" ]; then
            echo "Deleting ALB: $ALB_ARN"
            aws elbv2 delete-load-balancer --load-balancer-arn "$ALB_ARN" || echo "Failed to delete ALB"
          fi
        done
        
        # Classic Load Balancers
        aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text | tr '\t' '\n' | while read ELB_NAME; do
          if [ ! -z "$ELB_NAME" ]; then
            echo "Deleting Classic ELB: $ELB_NAME"
            aws elb delete-load-balancer --load-balancer-name "$ELB_NAME" || echo "Failed to delete ELB"
          fi
        done

    - name: 6. Cleanup S3 Buckets
      run: |
        echo "üßπ STEP 6: DESTROYING ALL S3 BUCKETS..."
        
        aws s3 ls | awk '{print $3}' | while read BUCKET; do
          if [ ! -z "$BUCKET" ]; then
            echo "Emptying and deleting bucket: $BUCKET"
            
            # Remove all versions and delete markers
            aws s3api list-object-versions --bucket "$BUCKET" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output text | while read KEY VERSION; do
              if [ ! -z "$KEY" ] && [ ! -z "$VERSION" ]; then
                aws s3api delete-object --bucket "$BUCKET" --key "$KEY" --version-id "$VERSION" || echo "Failed to delete version"
              fi
            done
            
            aws s3api list-object-versions --bucket "$BUCKET" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output text | while read KEY VERSION; do
              if [ ! -z "$KEY" ] && [ ! -z "$VERSION" ]; then
                aws s3api delete-object --bucket "$BUCKET" --key "$KEY" --version-id "$VERSION" || echo "Failed to delete marker"
              fi
            done
            
            # Empty bucket and delete
            aws s3 rm "s3://$BUCKET" --recursive || echo "Failed to empty $BUCKET"
            aws s3 rb "s3://$BUCKET" || echo "Failed to delete $BUCKET"
          fi
        done

    - name: 7. Terminate ALL EC2 Instances
      run: |
        echo "üßπ STEP 7: TERMINATING ALL EC2 INSTANCES..."
        
        aws ec2 describe-instances --filters "Name=instance-state-name,Values=running,stopped,stopping" --query 'Reservations[*].Instances[*].InstanceId' --output text | tr '\t' '\n' | while read INSTANCE_ID; do
          if [ ! -z "$INSTANCE_ID" ]; then
            echo "Terminating instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID" || echo "Failed to terminate $INSTANCE_ID"
          fi
        done

        - name: 8. Wait for instances to terminate
      run: |
        echo "‚è≥ STEP 8: WAITING FOR INSTANCES TO TERMINATE..."
        
        # Wait for all instances to be terminated
        echo "Waiting for all instances to terminate (this may take several minutes)..."
        aws ec2 wait instance-terminated --instance-ids $(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running,stopped,stopping,shutting-down" --query 'Reservations[*].Instances[*].InstanceId' --output text) 2>/dev/null || echo "No instances to wait for"
        
        echo "All instances terminated!"

    - name: 9. Release ALL Elastic IPs
      run: |
        echo "üßπ STEP 9: RELEASING ALL ELASTIC IPs..."
        
        aws ec2 describe-addresses --query 'Addresses[*].[AllocationId,AssociationId,PublicIp]' --output text | while read ALLOCATION_ID ASSOCIATION_ID PUBLIC_IP; do
          if [ ! -z "$ALLOCATION_ID" ]; then
            echo "Processing Elastic IP: $PUBLIC_IP (Allocation: $ALLOCATION_ID)"
            
            # Disassociate if associated
            if [ ! -z "$ASSOCIATION_ID" ] && [ "$ASSOCIATION_ID" != "None" ]; then
              echo "  Disassociating from: $ASSOCIATION_ID"
              aws ec2 disassociate-address --association-id "$ASSOCIATION_ID" || echo "  Failed to disassociate"
              sleep 5
            fi
            
            # Release the Elastic IP
            echo "  Releasing Elastic IP: $PUBLIC_IP"
            aws ec2 release-address --allocation-id "$ALLOCATION_ID" || echo "  Failed to release $ALLOCATION_ID"
          fi
        done

    - name: 10. Delete NAT Gateways
      run: |
        echo "üßπ STEP 10: DESTROYING ALL NAT GATEWAYS..."
        
        aws ec2 describe-nat-gateways --filter "Name=state,Values=available,pending" --query 'NatGateways[*].NatGatewayId' --output text | tr '\t' '\n' | while read NAT_GW_ID; do
          if [ ! -z "$NAT_GW_ID" ]; then
            echo "Deleting NAT Gateway: $NAT_GW_ID"
            aws ec2 delete-nat-gateway --nat-gateway-id "$NAT_GW_ID" || echo "Failed to delete $NAT_GW_ID"
          fi
        done
        
        # Wait for NAT Gateways to be deleted
        echo "Waiting for NAT Gateways to be deleted..."
        sleep 60

    - name: 11. Delete Security Groups
      run: |
        echo "üßπ STEP 11: DESTROYING ALL CUSTOM SECURITY GROUPS..."
        
        # Get all non-default security groups
        aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | tr '\t' '\n' | while read SG_ID; do
          if [ ! -z "$SG_ID" ]; then
            echo "Attempting to delete security group: $SG_ID"
            
            # Try multiple times as dependencies may need to clear
            for i in {1..5}; do
              if aws ec2 delete-security-group --group-id "$SG_ID" 2>/dev/null; then
                echo "  Successfully deleted: $SG_ID"
                break
              else
                echo "  Attempt $i failed for $SG_ID, retrying in 30 seconds..."
                sleep 30
              fi
            done
          fi
        done

    - name: 12. Detach and Delete Internet Gateways
      run: |
        echo "üßπ STEP 12: DESTROYING ALL INTERNET GATEWAYS..."
        
        aws ec2 describe-internet-gateways --query 'InternetGateways[*].[InternetGatewayId,Attachments[0].VpcId]' --output text | while read IGW_ID VPC_ID; do
          if [ ! -z "$IGW_ID" ] && [ "$VPC_ID" != "None" ] && [ ! -z "$VPC_ID" ]; then
            echo "Detaching IGW $IGW_ID from VPC $VPC_ID"
            aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" || echo "Failed to detach $IGW_ID"
            sleep 10
            
            echo "Deleting IGW: $IGW_ID"
            aws ec2 delete-internet-gateway --internet-gateway-id "$IGW_ID" || echo "Failed to delete $IGW_ID"
          fi
        done

    - name: 13. Delete Subnets
      run: |
        echo "üßπ STEP 13: DESTROYING ALL SUBNETS..."
        
        aws ec2 describe-subnets --query 'Subnets[*].SubnetId' --output text | tr '\t' '\n' | while read SUBNET_ID; do
          if [ ! -z "$SUBNET_ID" ]; then
            echo "Deleting subnet: $SUBNET_ID"
            aws ec2 delete-subnet --subnet-id "$SUBNET_ID" || echo "Failed to delete $SUBNET_ID"
          fi
        done

    - name: 14. Delete Route Tables
      run: |
        echo "üßπ STEP 14: DESTROYING ALL CUSTOM ROUTE TABLES..."
        
        # Get all route tables that are not main route tables
        aws ec2 describe-route-tables --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text | tr '\t' '\n' | while read RT_ID; do
          if [ ! -z "$RT_ID" ]; then
            echo "Deleting route table: $RT_ID"
            aws ec2 delete-route-table --route-table-id "$RT_ID" || echo "Failed to delete $RT_ID"
          fi
        done

    - name: 15. Delete VPCs
      run: |
        echo "üßπ STEP 15: DESTROYING ALL NON-DEFAULT VPCs..."
        
        aws ec2 describe-vpcs --query 'Vpcs[?IsDefault!=`true`].VpcId' --output text | tr '\t' '\n' | while read VPC_ID; do
          if [ ! -z "$VPC_ID" ]; then
            echo "Deleting VPC: $VPC_ID"
            aws ec2 delete-vpc --vpc-id "$VPC_ID" || echo "Failed to delete $VPC_ID"
          fi
        done

    - name: 16. Cleanup CloudWatch Log Groups
      run: |
        echo "üßπ STEP 16: DESTROYING ALL CLOUDWATCH LOG GROUPS..."
        
        aws logs describe-log-groups --query 'logGroups[*].logGroupName' --output text | tr '\t' '\n' | while read LOG_GROUP; do
          if [ ! -z "$LOG_GROUP" ]; then
            echo "Deleting log group: $LOG_GROUP"
            aws logs delete-log-group --log-group-name "$LOG_GROUP" || echo "Failed to delete $LOG_GROUP"
          fi
        done

    - name: 17. Cleanup IAM Roles and Policies
      run: |
        echo "üßπ STEP 17: DESTROYING ALL CUSTOM IAM ROLES..."
        
        # Get all roles that are not AWS service roles
        aws iam list-roles --query 'Roles[?!starts_with(RoleName, `AWS`) && !starts_with(RoleName, `aws-`) && !starts_with(RoleName, `service-role`)].RoleName' --output text | tr '\t' '\n' | while read ROLE_NAME; do
          if [ ! -z "$ROLE_NAME" ]; then
            echo "Processing role: $ROLE_NAME"
            
            # Detach managed policies
            aws iam list-attached-role-policies --role-name "$ROLE_NAME" --query 'AttachedPolicies[*].PolicyArn' --output text | tr '\t' '\n' | while read POLICY_ARN; do
              if [ ! -z "$POLICY_ARN" ]; then
                echo "  Detaching policy: $POLICY_ARN"
                aws iam detach-role-policy --role-name "$ROLE_NAME" --policy-arn "$POLICY_ARN" || echo "  Failed to detach $POLICY_ARN"
              fi
            done
            
            # Delete inline policies
            aws iam list-role-policies --role-name "$ROLE_NAME" --query 'PolicyNames' --output text | tr '\t' '\n' | while read POLICY_NAME; do
              if [ ! -z "$POLICY_NAME" ]; then
                echo "  Deleting inline policy: $POLICY_NAME"
                aws iam delete-role-policy --role-name "$ROLE_NAME" --policy-name "$POLICY_NAME" || echo "  Failed to delete $POLICY_NAME"
              fi
            done
            
            # Delete instance profiles
            aws iam list-instance-profiles-for-role --role-name "$ROLE_NAME" --query 'InstanceProfiles[*].InstanceProfileName' --output text | tr '\t' '\n' | while read PROFILE_NAME; do
              if [ ! -z "$PROFILE_NAME" ]; then
                echo "  Removing role from instance profile: $PROFILE_NAME"
                aws iam remove-role-from-instance-profile --instance-profile-name "$PROFILE_NAME" --role-name "$ROLE_NAME" || echo "  Failed to remove role"
                aws iam delete-instance-profile --instance-profile-name "$PROFILE_NAME" || echo "  Failed to delete profile"
              fi
            done
            
            # Delete the role
            echo "  Deleting role: $ROLE_NAME"
            aws iam delete-role --role-name "$ROLE_NAME" || echo "  Failed to delete $ROLE_NAME"
          fi
        done

    - name: 18. Final Resource Scan
      run: |
        echo "üîç FINAL SCAN: CHECKING FOR REMAINING RESOURCES..."
        echo "================================================="
        
        echo "=== REMAINING EC2 INSTANCES ==="
        aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name]' --output table || echo "‚úÖ No instances remaining"
        
        echo "=== REMAINING RDS INSTANCES ==="
        aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceStatus]' --output table || echo "‚úÖ No RDS instances remaining"
        
        echo "=== REMAINING S3 BUCKETS ==="
        aws s3 ls || echo "‚úÖ No buckets remaining"
        
        echo "=== REMAINING ELASTIC IPs ==="
        aws ec2 describe-addresses --query 'Addresses[*].[PublicIp,AllocationId]' --output table || echo "‚úÖ No Elastic IPs remaining"
        
        echo "=== REMAINING VPCs ==="
        aws ec2 describe-vpcs --query 'Vpcs[?IsDefault!=`true`].[VpcId,State]' --output table || echo "‚úÖ No custom VPCs remaining"
        
        echo "=== REMAINING NAT GATEWAYS ==="
        aws ec2 describe-nat-gateways --filter "Name=state,Values=available,pending" --query 'NatGateways[*].[NatGatewayId,State]' --output table || echo "‚úÖ No NAT Gateways remaining"
        
        echo ""
        echo "üéØ NUCLEAR CLEANUP COMPLETED!"
        echo "üí∞ All billable
