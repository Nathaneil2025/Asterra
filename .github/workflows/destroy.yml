name: üóëÔ∏è Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm complete infrastructure destruction'
        required: true
        type: string
      destroy_state_infrastructure:
        description: 'Also destroy state infrastructure (S3 bucket and DynamoDB table)'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: eu-central-1

jobs:
  validate-destroy:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate Confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Destroy confirmation failed. You must type 'DESTROY' exactly."
          echo "   Provided: '${{ github.event.inputs.confirm_destroy }}'"
          exit 1
        fi
        echo "‚úÖ Destroy confirmation validated"
        
    - name: Display Destroy Plan
      run: |
        echo "üö® DESTRUCTION PLAN üö®"
        echo "======================"
        echo ""
        echo "The following will be PERMANENTLY DESTROYED:"
        echo ""
        echo "üì¶ APPLICATION INFRASTRUCTURE:"
        echo "  ‚Ä¢ ECS Cluster and Services (GeoJSON Processor, WordPress)"
        echo "  ‚Ä¢ ECR Repository and all Docker images"
        echo "  ‚Ä¢ RDS Database and all data"
        echo "  ‚Ä¢ VPC, Subnets, Security Groups, NAT Gateways"
        echo "  ‚Ä¢ Load Balancers and Target Groups"
        echo "  ‚Ä¢ IAM Roles and Policies"
        echo "  ‚Ä¢ Lambda Functions"
        echo "  ‚Ä¢ S3 Buckets (except state bucket)"
        echo "  ‚Ä¢ CloudWatch Log Groups"
        echo ""
        if [ "${{ github.event.inputs.destroy_state_infrastructure }}" = "true" ]; then
          echo "üóÑÔ∏è STATE INFRASTRUCTURE (ALSO SELECTED FOR DESTRUCTION):"
          echo "  ‚Ä¢ Terraform State S3 Bucket"
          echo "  ‚Ä¢ DynamoDB State Lock Table"
          echo "  ‚Ä¢ ALL TERRAFORM STATE HISTORY WILL BE LOST!"
          echo ""
          echo "‚ö†Ô∏è  WARNING: Destroying state infrastructure means you cannot"
          echo "    track or manage any remaining resources with Terraform!"
        else
          echo "üóÑÔ∏è STATE INFRASTRUCTURE (WILL BE PRESERVED):"
          echo "  ‚Ä¢ Terraform State S3 Bucket (preserved)"
          echo "  ‚Ä¢ DynamoDB State Lock Table (preserved)"
        fi
        echo ""
        echo "‚ö†Ô∏è  THIS ACTION CANNOT BE UNDONE!"
        echo "‚ö†Ô∏è  ALL DATA WILL BE PERMANENTLY LOST!"
        echo ""
        echo "Triggered by: @${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"

  destroy-application:
    name: Destroy Application Infrastructure
    needs: validate-destroy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Verify AWS Access
      run: |
        echo "üîê Verifying AWS access..."
        aws sts get-caller-identity
        echo "‚úÖ AWS access confirmed"
        
    - name: Prepare for Destruction
      run: |
        echo "üîß Preparing Terraform for destruction..."
        
        # Ensure state-setup.tf is disabled to avoid conflicts
        if [ -f "state-setup.tf" ]; then
          mv state-setup.tf state-setup.tf.disabled
          echo "‚úÖ Disabled state-setup.tf"
        fi
        
        # Ensure backend.tf is enabled for remote state access
        if [ -f "backend.tf.disabled" ]; then
          mv backend.tf.disabled backend.tf
          echo "‚úÖ Enabled backend.tf"
        fi
        
    - name: Initialize Terraform
      run: |
        echo "üîß Initializing Terraform with remote state..."
        terraform init -input=false -no-color
        echo "‚úÖ Terraform initialized"
        
    - name: Show Current State
      run: |
        echo "üìã Current Terraform state:"
        echo "=========================="
        terraform state list || echo "No resources in state"
        echo ""
        echo "üìä Resource count:"
        terraform state list | wc -l || echo "0"
        
    - name: Create Destroy Plan
      run: |
        echo "üìã Creating destruction plan..."
        terraform plan -destroy -out=destroy.tfplan -input=false -no-color
        echo "‚úÖ Destroy plan created"
        
    - name: Show Destroy Plan Summary
      run: |
        echo "üìä DESTROY PLAN SUMMARY:"
        echo "======================="
        terraform show -no-color destroy.tfplan | grep -E "(Plan:|will be destroyed)" || echo "No resources to destroy"
        
    - name: Apply Destroy Plan
      run: |
        echo "üóëÔ∏è DESTROYING APPLICATION INFRASTRUCTURE..."
        echo "=========================================="
        
        # Apply destroy plan with detailed logging
        terraform apply destroy.tfplan -no-color 2>&1 | tee destroy.log
        
        echo ""
        echo "‚úÖ Application infrastructure destruction completed"
        
    - name: Verify Destruction
      run: |
        echo "üîç Verifying destruction..."
        
        REMAINING_RESOURCES=$(terraform state list | wc -l)
        echo "Remaining resources in state: $REMAINING_RESOURCES"
        
        if [ "$REMAINING_RESOURCES" -eq 0 ]; then
          echo "‚úÖ All application resources successfully destroyed"
        else
          echo "‚ö†Ô∏è Some resources remain in state:"
          terraform state list
          echo ""
          echo "This might be normal if state infrastructure is preserved"
        fi
        
    - name: Upload Destroy Log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: destroy-log
        path: destroy.log
        retention-days: 30

  destroy-state-infrastructure:
    name: Destroy State Infrastructure
    needs: destroy-application
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy_state_infrastructure == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2
        terraform_wrapper: false
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Final Warning
      run: |
        echo "üö® FINAL WARNING - DESTROYING STATE INFRASTRUCTURE üö®"
        echo "===================================================="
        echo ""
        echo "This will destroy:"
        echo "  ‚Ä¢ S3 bucket: terraform-state-asterra-project"
        echo "  ‚Ä¢ DynamoDB table: terraform-state-lock"
        echo "  ‚Ä¢ ALL Terraform state history"
        echo ""
        echo "After this, you will NOT be able to:"
        echo "  ‚Ä¢ Track any remaining AWS resources with Terraform"
        echo "  ‚Ä¢ Use Terraform to manage this infrastructure"
        echo "  ‚Ä¢ Recover any state information"
        echo ""
        echo "Proceeding in 10 seconds..."
        sleep 10
        
    - name: Download State File
      run: |
        echo "üíæ Downloading current state file as backup..."
        aws s3 cp s3://terraform-state-asterra-project/geojson-processor/terraform.tfstate ./terraform.tfstate.backup || echo "No state file found"
        
    - name: Prepare State Infrastructure Destruction
      run: |
        echo "üîß Preparing for state infrastructure destruction..."
        
        # Enable state-setup.tf for destruction
        if [ -f "state-setup.tf.disabled" ]; then
          mv state-setup.tf.disabled state-setup.tf
          echo "‚úÖ Enabled state-setup.tf"
        fi
        
        # Disable backend.tf to use local state for destruction
        if [ -f "backend.tf" ]; then
          mv backend.tf backend.tf.disabled
          echo "‚úÖ Disabled backend.tf"
        fi
        
    - name: Initialize Local State
      run: |
        echo "üîß Initializing Terraform with local state..."
        terraform init -input=false -no-color
        
    - name: Import State Infrastructure
      run: |
        echo "üì• Importing state infrastructure into local state..."
        
        # Import S3 bucket
        terraform import aws_s3_bucket.terraform_state terraform-state-asterra-project || echo "S3 bucket import failed or doesn't exist"
        
        # Import DynamoDB table
        terraform import aws_dynamodb_table.terraform_state_lock terraform-state-lock || echo "DynamoDB table import failed or doesn't exist"
        
        # Import other state resources if they exist
        terraform import aws_s3_bucket_versioning.terraform_state terraform-state-asterra-project || echo "S3 versioning import failed"
        terraform import aws_s3_bucket_server_side_encryption_configuration.terraform_state terraform-state-asterra-project || echo "S3 encryption import failed"
        terraform import aws_s3_bucket_public_access_block.terraform_state terraform-state-asterra-project || echo "S3 public access block import failed"
        
    - name: Destroy State Infrastructure
      run: |
        echo "üóëÔ∏è DESTROYING STATE INFRASTRUCTURE..."
        echo "===================================="
        
        # Force destroy S3 bucket (even if not empty)
        echo "üóëÔ∏è Force destroying S3 bucket contents..."
        aws s3 rm s3://terraform-state-asterra-project --recursive || echo "S3 bucket already empty or doesn't exist"
        
        # Destroy with Terraform
        terraform destroy -auto-approve -input=false -no-color
        
        echo "‚úÖ State infrastructure destruction completed"
        
    - name: Verify Complete Destruction
      run: |
        echo "üîç Verifying complete destruction..."
        
        # Check S3 bucket
        if aws s3 ls s3://terraform-state-asterra-project/ 2>/dev/null; then
          echo "‚ö†Ô∏è S3 bucket still exists"
        else
          echo "‚úÖ S3 bucket destroyed"
        fi
        
        # Check DynamoDB table
        if aws dynamodb describe-table --table-name terraform-state-lock --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "‚ö†Ô∏è DynamoDB table still exists"
        else
          echo "‚úÖ DynamoDB table destroyed"
        fi
        
    - name: Upload State Backup
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state-backup
        path: terraform.tfstate.backup
        retention-days: 90

    cleanup-verification:
    name: Final Cleanup Verification
    needs: [destroy-application, destroy-state-infrastructure]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Final AWS Resource Check
      run: |
        echo "üîç FINAL CLEANUP VERIFICATION"
        echo "============================"
        echo ""
        
        # Check for any remaining resources that might have been missed
        echo "üîç Checking for remaining AWS resources..."
        
        # Check ECS clusters
        echo "üì¶ ECS Clusters:"
        aws ecs list-clusters --query 'clusterArns[?contains(@, `geojson`) || contains(@, `wordpress`)]' --output table || echo "No ECS clusters found"
        
        # Check ECR repositories
        echo "üê≥ ECR Repositories:"
        aws ecr describe-repositories --query 'repositories[?contains(repositoryName, `geojson`) || contains(repositoryName, `wordpress`)].repositoryName' --output table || echo "No ECR repositories found"
        
        # Check RDS instances
        echo "üóÑÔ∏è RDS Instances:"
        aws rds describe-db-instances --query 'DBInstances[?contains(DBInstanceIdentifier, `geojson`) || contains(DBInstanceIdentifier, `wordpress`)].DBInstanceIdentifier' --output table || echo "No RDS instances found"
        
        # Check VPCs (excluding default)
        echo "üåê VPCs:"
        aws ec2 describe-vpcs --query 'Vpcs[?!IsDefault && Tags[?Key==`Name` && (contains(Value, `geojson`) || contains(Value, `wordpress`) || contains(Value, `my-vpc`))]].VpcId' --output table || echo "No custom VPCs found"
        
        # Check S3 buckets
        echo "üì¶ S3 Buckets:"
        aws s3 ls | grep -E "(geojson|wordpress|terraform-state)" || echo "No project-related S3 buckets found"
        
        # Check Lambda functions
        echo "‚ö° Lambda Functions:"
        aws lambda list-functions --query 'Functions[?contains(FunctionName, `geojson`) || contains(FunctionName, `s3-trigger`)].FunctionName' --output table || echo "No Lambda functions found"
        
        # Check IAM roles
        echo "üë• IAM Roles:"
        aws iam list-roles --query 'Roles[?contains(RoleName, `geojson`) || contains(RoleName, `wordpress`) || contains(RoleName, `ecs`)].RoleName' --output table || echo "No project-related IAM roles found"
        
        echo ""
        echo "‚úÖ Final verification completed"
        echo ""
        echo "üìã DESTRUCTION SUMMARY:"
        echo "======================"
        echo "‚Ä¢ Application infrastructure: ${{ needs.destroy-application.result }}"
        if [ "${{ github.event.inputs.destroy_state_infrastructure }}" = "true" ]; then
          echo "‚Ä¢ State infrastructure: ${{ needs.destroy-state-infrastructure.result }}"
        else
          echo "‚Ä¢ State infrastructure: PRESERVED (as requested)"
        fi
        echo ""
        echo "üéâ Infrastructure destruction workflow completed!"
        
    - name: Post-Destruction Notice
      run: |
        echo "üì¢ POST-DESTRUCTION NOTICE"
        echo "========================="
        echo ""
        echo "‚úÖ Infrastructure destruction completed successfully!"
        echo ""
        echo "üìã What was destroyed:"
        echo "  ‚Ä¢ All application infrastructure (ECS, RDS, VPC, etc.)"
        echo "  ‚Ä¢ All Docker images in ECR"
        echo "  ‚Ä¢ All application data"
        if [ "${{ github.event.inputs.destroy_state_infrastructure }}" = "true" ]; then
          echo "  ‚Ä¢ Terraform state infrastructure"
          echo "  ‚Ä¢ All Terraform state history"
          echo ""
          echo "‚ö†Ô∏è  IMPORTANT: State infrastructure was destroyed!"
          echo "   To deploy again, you'll need to:"
          echo "   1. Remove or rename backend.tf"
          echo "   2. Run terraform init with local state"
          echo "   3. Recreate state infrastructure first"
        else
          echo ""
          echo "‚ÑπÔ∏è  State infrastructure was preserved"
          echo "   You can redeploy by running the CI/CD pipeline again"
        fi
        echo ""
        echo "üîç If you see any remaining resources above, you may need to:"
        echo "  ‚Ä¢ Delete them manually in the AWS console"
        echo "  ‚Ä¢ Check for resources in other regions"
        echo "  ‚Ä¢ Verify IAM permissions for cleanup"
        echo ""
        echo "üí∞ Remember to check your AWS billing to ensure no unexpected charges"
